// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/daymenu/goadmin/internal/ent/admin"
	"github.com/daymenu/goadmin/internal/ent/predicate"
	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// AdminUpdate is the builder for updating Admin entities.
type AdminUpdate struct {
	config
	hooks    []Hook
	mutation *AdminMutation
}

// Where adds a new predicate for the AdminUpdate builder.
func (au *AdminUpdate) Where(ps ...predicate.Admin) *AdminUpdate {
	au.mutation.predicates = append(au.mutation.predicates, ps...)
	return au
}

// SetStatus sets the "status" field.
func (au *AdminUpdate) SetStatus(i int) *AdminUpdate {
	au.mutation.ResetStatus()
	au.mutation.SetStatus(i)
	return au
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (au *AdminUpdate) SetNillableStatus(i *int) *AdminUpdate {
	if i != nil {
		au.SetStatus(*i)
	}
	return au
}

// AddStatus adds i to the "status" field.
func (au *AdminUpdate) AddStatus(i int) *AdminUpdate {
	au.mutation.AddStatus(i)
	return au
}

// SetDelStatus sets the "del_status" field.
func (au *AdminUpdate) SetDelStatus(i int) *AdminUpdate {
	au.mutation.ResetDelStatus()
	au.mutation.SetDelStatus(i)
	return au
}

// SetNillableDelStatus sets the "del_status" field if the given value is not nil.
func (au *AdminUpdate) SetNillableDelStatus(i *int) *AdminUpdate {
	if i != nil {
		au.SetDelStatus(*i)
	}
	return au
}

// AddDelStatus adds i to the "del_status" field.
func (au *AdminUpdate) AddDelStatus(i int) *AdminUpdate {
	au.mutation.AddDelStatus(i)
	return au
}

// SetUserName sets the "user_name" field.
func (au *AdminUpdate) SetUserName(s string) *AdminUpdate {
	au.mutation.SetUserName(s)
	return au
}

// SetNillableUserName sets the "user_name" field if the given value is not nil.
func (au *AdminUpdate) SetNillableUserName(s *string) *AdminUpdate {
	if s != nil {
		au.SetUserName(*s)
	}
	return au
}

// SetTrueName sets the "true_name" field.
func (au *AdminUpdate) SetTrueName(s string) *AdminUpdate {
	au.mutation.SetTrueName(s)
	return au
}

// SetNillableTrueName sets the "true_name" field if the given value is not nil.
func (au *AdminUpdate) SetNillableTrueName(s *string) *AdminUpdate {
	if s != nil {
		au.SetTrueName(*s)
	}
	return au
}

// SetMobile sets the "mobile" field.
func (au *AdminUpdate) SetMobile(s string) *AdminUpdate {
	au.mutation.SetMobile(s)
	return au
}

// SetNillableMobile sets the "mobile" field if the given value is not nil.
func (au *AdminUpdate) SetNillableMobile(s *string) *AdminUpdate {
	if s != nil {
		au.SetMobile(*s)
	}
	return au
}

// Mutation returns the AdminMutation object of the builder.
func (au *AdminUpdate) Mutation() *AdminMutation {
	return au.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AdminUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	au.defaults()
	if len(au.hooks) == 0 {
		affected, err = au.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AdminMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			au.mutation = mutation
			affected, err = au.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(au.hooks) - 1; i >= 0; i-- {
			mut = au.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, au.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (au *AdminUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AdminUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AdminUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (au *AdminUpdate) defaults() {
	if _, ok := au.mutation.UpdateTime(); !ok {
		v := admin.UpdateDefaultUpdateTime()
		au.mutation.SetUpdateTime(v)
	}
}

func (au *AdminUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   admin.Table,
			Columns: admin.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: admin.FieldID,
			},
		},
	}
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: admin.FieldUpdateTime,
		})
	}
	if value, ok := au.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: admin.FieldStatus,
		})
	}
	if value, ok := au.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: admin.FieldStatus,
		})
	}
	if value, ok := au.mutation.DelStatus(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: admin.FieldDelStatus,
		})
	}
	if value, ok := au.mutation.AddedDelStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: admin.FieldDelStatus,
		})
	}
	if value, ok := au.mutation.UserName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: admin.FieldUserName,
		})
	}
	if value, ok := au.mutation.TrueName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: admin.FieldTrueName,
		})
	}
	if value, ok := au.mutation.Mobile(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: admin.FieldMobile,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{admin.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// AdminUpdateOne is the builder for updating a single Admin entity.
type AdminUpdateOne struct {
	config
	hooks    []Hook
	mutation *AdminMutation
}

// SetStatus sets the "status" field.
func (auo *AdminUpdateOne) SetStatus(i int) *AdminUpdateOne {
	auo.mutation.ResetStatus()
	auo.mutation.SetStatus(i)
	return auo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (auo *AdminUpdateOne) SetNillableStatus(i *int) *AdminUpdateOne {
	if i != nil {
		auo.SetStatus(*i)
	}
	return auo
}

// AddStatus adds i to the "status" field.
func (auo *AdminUpdateOne) AddStatus(i int) *AdminUpdateOne {
	auo.mutation.AddStatus(i)
	return auo
}

// SetDelStatus sets the "del_status" field.
func (auo *AdminUpdateOne) SetDelStatus(i int) *AdminUpdateOne {
	auo.mutation.ResetDelStatus()
	auo.mutation.SetDelStatus(i)
	return auo
}

// SetNillableDelStatus sets the "del_status" field if the given value is not nil.
func (auo *AdminUpdateOne) SetNillableDelStatus(i *int) *AdminUpdateOne {
	if i != nil {
		auo.SetDelStatus(*i)
	}
	return auo
}

// AddDelStatus adds i to the "del_status" field.
func (auo *AdminUpdateOne) AddDelStatus(i int) *AdminUpdateOne {
	auo.mutation.AddDelStatus(i)
	return auo
}

// SetUserName sets the "user_name" field.
func (auo *AdminUpdateOne) SetUserName(s string) *AdminUpdateOne {
	auo.mutation.SetUserName(s)
	return auo
}

// SetNillableUserName sets the "user_name" field if the given value is not nil.
func (auo *AdminUpdateOne) SetNillableUserName(s *string) *AdminUpdateOne {
	if s != nil {
		auo.SetUserName(*s)
	}
	return auo
}

// SetTrueName sets the "true_name" field.
func (auo *AdminUpdateOne) SetTrueName(s string) *AdminUpdateOne {
	auo.mutation.SetTrueName(s)
	return auo
}

// SetNillableTrueName sets the "true_name" field if the given value is not nil.
func (auo *AdminUpdateOne) SetNillableTrueName(s *string) *AdminUpdateOne {
	if s != nil {
		auo.SetTrueName(*s)
	}
	return auo
}

// SetMobile sets the "mobile" field.
func (auo *AdminUpdateOne) SetMobile(s string) *AdminUpdateOne {
	auo.mutation.SetMobile(s)
	return auo
}

// SetNillableMobile sets the "mobile" field if the given value is not nil.
func (auo *AdminUpdateOne) SetNillableMobile(s *string) *AdminUpdateOne {
	if s != nil {
		auo.SetMobile(*s)
	}
	return auo
}

// Mutation returns the AdminMutation object of the builder.
func (auo *AdminUpdateOne) Mutation() *AdminMutation {
	return auo.mutation
}

// Save executes the query and returns the updated Admin entity.
func (auo *AdminUpdateOne) Save(ctx context.Context) (*Admin, error) {
	var (
		err  error
		node *Admin
	)
	auo.defaults()
	if len(auo.hooks) == 0 {
		node, err = auo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AdminMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			auo.mutation = mutation
			node, err = auo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(auo.hooks) - 1; i >= 0; i-- {
			mut = auo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, auo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AdminUpdateOne) SaveX(ctx context.Context) *Admin {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AdminUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AdminUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auo *AdminUpdateOne) defaults() {
	if _, ok := auo.mutation.UpdateTime(); !ok {
		v := admin.UpdateDefaultUpdateTime()
		auo.mutation.SetUpdateTime(v)
	}
}

func (auo *AdminUpdateOne) sqlSave(ctx context.Context) (_node *Admin, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   admin.Table,
			Columns: admin.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: admin.FieldID,
			},
		},
	}
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Admin.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := auo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: admin.FieldUpdateTime,
		})
	}
	if value, ok := auo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: admin.FieldStatus,
		})
	}
	if value, ok := auo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: admin.FieldStatus,
		})
	}
	if value, ok := auo.mutation.DelStatus(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: admin.FieldDelStatus,
		})
	}
	if value, ok := auo.mutation.AddedDelStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: admin.FieldDelStatus,
		})
	}
	if value, ok := auo.mutation.UserName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: admin.FieldUserName,
		})
	}
	if value, ok := auo.mutation.TrueName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: admin.FieldTrueName,
		})
	}
	if value, ok := auo.mutation.Mobile(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: admin.FieldMobile,
		})
	}
	_node = &Admin{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{admin.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
